apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply from: "publisher.gradle"
apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'
apply plugin: 'jacoco'

ext.build_version_name = '1.1.1'

android {
    compileSdkVersion 32
    buildToolsVersion "30.0.3"

    defaultConfig {
        //applicationId "com.push.android.pushsdkandroid"
        minSdkVersion 19
        targetSdkVersion 32
        versionCode 1

        versionName "${build_version_name}"
        buildConfigField 'String', 'VERSION_NAME', "\"${build_version_name}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget=11
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"


    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}






dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.lifecycle:lifecycle-process:2.5.1'
    implementation 'androidx.test:monitor:1.5.0'


    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation project(path: ':pushsdkandroid')
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'org.robolectric:robolectric:4.8'

    implementation 'android.arch.work:work-runtime:1.0.1'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0"

    //noinspection GradleDependency
    implementation 'com.google.firebase:firebase-core:17.5.0'
    //noinspection GradleDependency
    //implementation 'com.google.firebase:firebase-iid:20.2.4'
    //noinspection GradleDependency
    implementation 'com.google.firebase:firebase-messaging:23.1.0'

    implementation 'io.github.microutils:kotlin-logging:1.8.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'

    implementation "org.jacoco:org.jacoco.agent:0.7.9:runtime"

    implementation 'com.google.code.gson:gson:2.8.6'
}

//get HEAD commit hash
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        //short commit hash
        //commandLine 'git', 'rev-parse', '--short', 'HEAD'
        //full commit hash
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.push.android'
                artifactId = 'PushSDK'
                //version = '1.0'
                version = "${build_version_name}-RELEASE"
            }
            snapshot(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.release

                groupId = 'com.push.android'
                artifactId = 'PushSDK'
                //version = '1.0'
                version = "${build_version_name}-SNAPSHOT"
            }
            commitHash(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.release

                groupId = 'com.push.android'
                artifactId = 'PushSDK'
                //version = '1.0'
                version = "${getGitHash}"
            }
            // Creates a Maven publication called “debug”.
//            debug(MavenPublication) {
//                // Applies the component for the debug build variant.
//                from components.debug
//
//                groupId = 'com.push.android'
//                artifactId = 'PushSDK-debug'
//                version = '1.0'
//            }
        }

        //publish to this path
        repositories {
            maven {
                //publish locally for now
                url "$buildDir/maven-repos/"
//                def releasesRepoUrl = "$buildDir/maven-repos/releases"
//                def snapshotsRepoUrl = "$buildDir/maven-repos/snapshots"
//                url = version.endsWith('RELEASE') ? releasesRepoUrl : snapshotsRepoUrl
            }
        }
    }
}

dokkaJavadoc.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
        //outputDirectory.set(buildDir("ayy"))
        configureEach {
            includes.from("Module.md")
            skipDeprecated.set(false)
            skipEmptyPackages.set(true)
            reportUndocumented.set(true)
            includeNonPublic.set(false)
        }
    }
}

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
        //outputDirectory.set(buildDir("ayy"))
        configureEach {
            includes.from("Module.md")
            skipDeprecated.set(false)
            skipEmptyPackages.set(true)
            reportUndocumented.set(true)
            includeNonPublic.set(false)
        }
    }
}

dokkaGfm.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
        //outputDirectory.set(buildDir("ayy"))
        configureEach {
            includes.from("Module.md")
            skipDeprecated.set(false)
            skipEmptyPackages.set(true)
            reportUndocumented.set(true)
            includeNonPublic.set(false)
        }
    }
}

task dokkaJavadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from tasks.dokkaJavadoc.outputDirectory
}

//task dokkaHtmlJar(type: Jar, dependsOn: dokkaHtml) {
//    //archiveClassifier.set('html-doc')
//    archiveClassifier.set('kdoc')
//    from tasks.dokkaHtml.outputDirectory
//}

artifacts {
    archives dokkaJavadocJar
//    archives dokkaHtmlJar
}
